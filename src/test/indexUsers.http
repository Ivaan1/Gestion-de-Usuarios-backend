### Registro de usuario
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}
### Inicio de sesión de usuario
POST http://localhost:5000/api/auth/login
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "email" : "test@example.com",
  "password" : "password123"
}

### Guardar manualmente el token (Reemplaza después de la primera ejecución)
@auth_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODE5NTM2MmZlNTIyZDg2OGZlMmI5NTEiLCJyb2xlIjoidXN1YXJpbyIsImlhdCI6MTc0NjQ5MDIxMCwiZXhwIjoxNzU2ODU4MjEwfQ.Nl0O-EOsYPmuydH9XQahIHPqxEahsAFVkv9VKp5A5S4

### Validación usando el token almacenado
POST http://localhost:5000/api/auth/validation
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "code": 8862682
}
###
@UserId = 68190f2e028e6b8b4e7676b5

### Rellenar usuario loggeado
PATCH http://localhost:5000/api/users
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "name": "Test User",
  "about": "This is a test user",
  "phone": "+1234567890",
  "nif": "12345678A",
  "role" : "admin",
  "address": {
    "street": "Main St",
    "number": 123,
    "postal": 12345,
    "city": "Test City",
    "province": "Test Province"
  }
}

### Añadir una empresa al usuario
PATCH http://localhost:5000/api/users/company
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "name": "Test Company",
  "address": {
    "street": "Main St",
    "number": 123,
    "postal": 12345,
    "city": "Test City",
    "province": "Test Province"
  }
}

### Obtener la empresa vinculado al usuario 
GET http://localhost:5000/api/users/company
Authorization: Bearer {{auth_token}}
Content-Type: application/json



### Obtener información de todos los usuarios
GET http://localhost:5000/api/users
Authorization: Bearer {{auth_token}}
Content-Type: application/json

### 5. Usuarios: Crear un nuevo usuario
POST http://localhost:5000/api/users
Content-Type: application/json

{
  "email": "testuser2@example.com",
  "password": "password123"
}



### 6. Usuarios: Obtener un usuario por ID (utilizando el id del usuario creado)
GET http://localhost:5000/api/users/{{UserId}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

### 7. Usuarios: Borrar a todos los usuarios 
DELETE http://localhost:5000/api/users
Authorization: Bearer {{auth_token}}
Content-Type: application/json

### 8. Usuarios: Borrar un usuario por ID (utilizando el id del usuario creado)
DELETE http://localhost:5000/api/users/{{UserId}}
Authorization: Bearer {{auth_token}} 

### Usuarios: Subir foto (PATCH /api/users/image)

PATCH http://localhost:5000/api/users/image
Authorization: Bearer {{auth_token}}
Content-Type: multipart/form-data

{
  "image": "image.png"
}


### Archivar usuario loggeado
PATCH http://localhost:5000/api/users/archive
Authorization: Bearer {{auth_token}}
Content-Type: application/json


### Desarchivar usuario loggeado
PATCH http://localhost:5000/api/users/restore
Authorization: Bearer {{auth_token}}
Content-Type: application/json


### recuperar contraseña 
### devuelve un token de recuperacion
POST http://localhost:5000/api/auth/recovery
Content-Type: application/json

{
  "email": "ivanmanuel1213@gmail.com"
}


###validar codigo de recuperacion
POST http://localhost:5000/api/auth/validation
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "code": 8862682
}
